schema {
  query: Query
  mutation: Mutation
}

directive @semanticNonNull(levels: [Int] = [0]) on FIELD_DEFINITION

type Mutation {
  """
  紐づくリソースは全て削除される
  """
  accountDelete: AccountDeleteResult @semanticNonNull
  login(
    """
    ユーザー名もしくはメールアドレス、100文字まで
    """
    loginId: String!
    """
    8文字以上、50文字まで
    """
    password: String!
  ): LoginResult @semanticNonNull
  loginPasswordChange(
    """
    8文字以上、50文字まで
    """
    oldPassword: String!
    """
    8文字以上、50文字まで
    """
    newPassword: String!
  ): LoginPasswordChangeResult @semanticNonNull
  logout: LogoutResult @semanticNonNull
  postCreate(
    """
    280文字まで
    """
    content: String!
  ): PostCreateResult @semanticNonNull
  postDelete(id: ID!): PostDeleteResult @semanticNonNull
  postEdit(
    id: ID!
    """
    280文字まで
    """
    content: String!
  ): PostEditResult @semanticNonNull
  postLike(id: ID!): PostLikeResult @semanticNonNull
  postReply(
    id: ID!
    """
    280文字まで
    """
    content: String!
  ): PostReplyResult @semanticNonNull
  postUnlike(id: ID!): PostUnlikeResult @semanticNonNull
  signup(
    """
    5文字以上、15文字まで、既に存在する場合はエラー。使える文字は半角英数字とアンダースコアのみ。
    """
    name: String!
    """
    100文字まで、既に存在する場合はエラー
    """
    email: String!
    """
    8文字以上、50文字まで
    """
    password: String!
  ): SignupResult @semanticNonNull
  userBlock(id: ID!): UserBlockResult @semanticNonNull
  userEmailChange(
    """
    100文字まで、既に存在する場合はエラー
    """
    email: String!
  ): UserEmailChangeResult @semanticNonNull
  userFollow(id: ID!): UserFollowResult @semanticNonNull
  userNameChange(
    """
    5文字以上、15文字まで、既に存在する場合はエラー
    """
    name: String!
  ): UserNameChangeResult @semanticNonNull
  userProfileEdit(
    """
    300文字まで
    """
    avatar: URL
    """
    50文字まで、null は入力エラー
    """
    handle: String
    """
    160文字まで、null は入力エラー
    """
    bio: String
    """
    30文字まで、null は入力エラー
    """
    location: String
    """
    100文字まで、null は入力エラー
    """
    website: URL
  ): UserProfileEditResult @semanticNonNull
  userUnblock(id: ID!): UserUnblockResult @semanticNonNull
  userUnfollow(id: ID!): UserUnfollowResult @semanticNonNull
}

union AccountDeleteResult = AccountDeleteSuccess

type AccountDeleteSuccess {
  userId: ID!
}

union LoginResult = LoginSuccess | InvalidInputErrors | LoginFailedError

type LoginSuccess {
  token: String!
}

type LoginFailedError implements Error {
  message: String!
}

union LoginPasswordChangeResult =
  | LoginPasswordChangeSuccess
  | InvalidInputErrors
  | SamePasswordsError
  | IncorrectOldPasswordError

type LoginPasswordChangeSuccess {
  id: ID!
}

type SamePasswordsError implements Error {
  message: String!
}

type IncorrectOldPasswordError implements Error {
  message: String!
}

union LogoutResult = LogoutSuccess

type LogoutSuccess {
  userId: ID!
}

union PostCreateResult = PostCreateSuccess | InvalidInputErrors

type PostCreateSuccess {
  post: Post!
}

union PostDeleteResult = PostDeleteSuccess | ResourceNotFoundError

type PostDeleteSuccess {
  postId: ID!
}

union PostEditResult = PostEditSuccess | InvalidInputErrors | ResourceNotFoundError

type PostEditSuccess {
  post: Post!
}

union PostLikeResult = PostLikeSuccess | ResourceNotFoundError

type PostLikeSuccess {
  post: Post!
  likeEdge: LikeEdge!
}

union PostReplyResult = PostReplySuccess | InvalidInputErrors | ResourceNotFoundError

type PostReplySuccess {
  post: Post!
}

union PostUnlikeResult = PostUnlikeSuccess

type PostUnlikeSuccess {
  postId: ID!
}

union SignupResult =
  | SignupSuccess
  | InvalidInputErrors
  | UserNameAlreadyTakenError
  | UserEmailAlreadyTakenError

type SignupSuccess {
  token: String!
}

union UserBlockResult = UserBlockSuccess | ResourceNotFoundError

type UserBlockSuccess {
  blockee: User!
  blockingEdge: BlockingEdge!
}

union UserEmailChangeResult =
  | UserEmailChangeSuccess
  | InvalidInputErrors
  | UserEmailAlreadyTakenError

type UserEmailChangeSuccess {
  user: User!
}

union UserFollowResult = UserFollowSuccess | ResourceNotFoundError

type UserFollowSuccess {
  followee: User!
  followingEdge: FollowingEdge!
}

union UserNameChangeResult = UserNameChangeSuccess | InvalidInputErrors | UserNameAlreadyTakenError

type UserNameChangeSuccess {
  user: User!
}

union UserProfileEditResult = UserProfileEditSuccess | InvalidInputErrors

type UserProfileEditSuccess {
  user: User!
}

union UserUnblockResult = UserUnblockSuccess

type UserUnblockSuccess {
  userId: ID!
}

union UserUnfollowResult = UserUnfollowSuccess

type UserUnfollowSuccess {
  userId: ID!
}

interface Node {
  id: ID!
}

type Post implements Node {
  author: User @semanticNonNull
  content: String @semanticNonNull
  createdAt: DateTime @semanticNonNull
  hasDeleted: Boolean @semanticNonNull
  hasUpdated: Boolean @semanticNonNull
  id: ID!
  likeCount: Int @semanticNonNull
  likers(
    """
    max: 30
    """
    first: Int
    after: String
    """
    max: 30
    """
    last: Int
    before: String
    reverse: Boolean! = true
    sortKey: LikerSortKeys! = LIKED_AT
  ): LikerConnection @semanticNonNull
  parents(
    """
    max: 30
    """
    first: Int
    after: String
    """
    max: 30
    """
    last: Int
    before: String
    reverse: Boolean! = true
    sortKey: PostParentSortKeys! = CREATED_AT
  ): PostParentConnection @semanticNonNull
  replies(
    """
    max: 30
    """
    first: Int
    after: String
    """
    max: 30
    """
    last: Int
    before: String
    reverse: Boolean! = false
    sortKey: ReplySortKeys! = REPLIED_AT
  ): ReplyConnection @semanticNonNull
  replyCount: Int @semanticNonNull
  updatedAt: DateTime @semanticNonNull
  url: URL @semanticNonNull
  viewerHasLiked: Boolean @semanticNonNull
}

enum LikerSortKeys {
  LIKED_AT
}

type LikerConnection {
  pageInfo: PageInfo!
  edges: [LikerEdge] @semanticNonNull(levels: [0, 1])
  nodes: [User] @semanticNonNull(levels: [0, 1])
  totalCount: Int @semanticNonNull
}

type LikerEdge {
  cursor: String!
  node: User @semanticNonNull
  likedAt: DateTime @semanticNonNull
}

enum PostParentSortKeys {
  CREATED_AT
}

type PostParentConnection {
  pageInfo: PageInfo!
  edges: [PostParentEdge] @semanticNonNull(levels: [0, 1])
  nodes: [Post] @semanticNonNull(levels: [0, 1])
  totalCount: Int @semanticNonNull
}

type PostParentEdge {
  cursor: String!
  node: Post @semanticNonNull
}

enum ReplySortKeys {
  REPLIED_AT
}

type ReplyConnection {
  pageInfo: PageInfo!
  edges: [ReplyEdge] @semanticNonNull(levels: [0, 1])
  nodes: [Post] @semanticNonNull(levels: [0, 1])
  totalCount: Int @semanticNonNull
}

type ReplyEdge {
  cursor: String!
  node: Post @semanticNonNull
  repliedAt: DateTime @semanticNonNull
}

type Query {
  node(id: ID!): Node
  post(id: ID!): Post
  posts(
    """
    max: 30
    """
    first: Int
    after: String
    """
    max: 30
    """
    last: Int
    before: String
    reverse: Boolean! = true
    sortKey: PostSortKeys! = CREATED_AT
  ): PostConnection @semanticNonNull
  user(id: ID!): User
  viewer: User
}

enum PostSortKeys {
  CREATED_AT
  UPDATED_AT
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge] @semanticNonNull(levels: [0, 1])
  nodes: [Post] @semanticNonNull(levels: [0, 1])
  totalCount: Int @semanticNonNull
}

type PostEdge {
  cursor: String!
  node: Post @semanticNonNull
}

type User implements Node {
  avatar: URL @semanticNonNull
  bio: String @semanticNonNull
  blockers(
    """
    max: 30
    """
    first: Int
    after: String
    """
    max: 30
    """
    last: Int
    before: String
    reverse: Boolean! = true
    sortKey: BlockerSortKeys! = BLOCKED_AT
  ): BlockerConnection @semanticNonNull
  blockings(
    """
    max: 30
    """
    first: Int
    after: String
    """
    max: 30
    """
    last: Int
    before: String
    reverse: Boolean! = true
    sortKey: BlockingSortKeys! = BLOCKED_AT
  ): BlockingConnection @semanticNonNull
  createdAt: DateTime @semanticNonNull
  email: EmailAddress @semanticNonNull
  followers(
    """
    max: 30
    """
    first: Int
    after: String
    """
    max: 30
    """
    last: Int
    before: String
    reverse: Boolean! = true
    sortKey: FollowerSortKeys! = FOLLOWED_AT
  ): FollowerConnection @semanticNonNull
  followings(
    """
    max: 30
    """
    first: Int
    after: String
    """
    max: 30
    """
    last: Int
    before: String
    reverse: Boolean! = true
    sortKey: FollowingSortKeys! = FOLLOWED_AT
  ): FollowingConnection @semanticNonNull
  handle: String @semanticNonNull
  id: ID!
  isBlockingViewer: Boolean @semanticNonNull
  isFollowingViewer: Boolean @semanticNonNull
  likes(
    """
    max: 30
    """
    first: Int
    after: String
    """
    max: 30
    """
    last: Int
    before: String
    reverse: Boolean! = true
    sortKey: LikeSortKeys! = LIKED_AT
  ): LikeConnection @semanticNonNull
  location: String @semanticNonNull
  name: String @semanticNonNull
  posts(
    """
    max: 30
    """
    first: Int
    after: String
    """
    max: 30
    """
    last: Int
    before: String
    reverse: Boolean! = true
    sortKey: UserPostSortKeys! = CREATED_AT
  ): UserPostConnection @semanticNonNull
  updatedAt: DateTime @semanticNonNull
  viewerIsBlocking: Boolean @semanticNonNull
  viewerIsFollowing: Boolean @semanticNonNull
  website: URL @semanticNonNull
}

enum BlockerSortKeys {
  BLOCKED_AT
}

type BlockerConnection {
  pageInfo: PageInfo!
  edges: [BlockerEdge] @semanticNonNull(levels: [0, 1])
  nodes: [User] @semanticNonNull(levels: [0, 1])
  totalCount: Int @semanticNonNull
}

type BlockerEdge {
  cursor: String!
  node: User @semanticNonNull
  blockedAt: DateTime @semanticNonNull
}

enum BlockingSortKeys {
  BLOCKED_AT
}

type BlockingConnection {
  pageInfo: PageInfo!
  edges: [BlockingEdge] @semanticNonNull(levels: [0, 1])
  nodes: [User] @semanticNonNull(levels: [0, 1])
  totalCount: Int @semanticNonNull
}

type BlockingEdge {
  cursor: String!
  node: User @semanticNonNull
  blockedAt: DateTime @semanticNonNull
}

enum FollowerSortKeys {
  FOLLOWED_AT
}

type FollowerConnection {
  pageInfo: PageInfo!
  edges: [FollowerEdge] @semanticNonNull(levels: [0, 1])
  nodes: [User] @semanticNonNull(levels: [0, 1])
  totalCount: Int @semanticNonNull
}

type FollowerEdge {
  cursor: String!
  node: User @semanticNonNull
  followedAt: DateTime @semanticNonNull
}

enum FollowingSortKeys {
  FOLLOWED_AT
}

type FollowingConnection {
  pageInfo: PageInfo!
  edges: [FollowingEdge] @semanticNonNull(levels: [0, 1])
  nodes: [User] @semanticNonNull(levels: [0, 1])
  totalCount: Int @semanticNonNull
}

type FollowingEdge {
  cursor: String!
  node: User @semanticNonNull
  followedAt: DateTime @semanticNonNull
}

enum LikeSortKeys {
  LIKED_AT
}

type LikeConnection {
  pageInfo: PageInfo!
  edges: [LikeEdge] @semanticNonNull(levels: [0, 1])
  nodes: [Post] @semanticNonNull(levels: [0, 1])
  totalCount: Int @semanticNonNull
}

type LikeEdge {
  cursor: String!
  node: Post @semanticNonNull
  likedAt: DateTime @semanticNonNull
}

enum UserPostSortKeys {
  CREATED_AT
  UPDATED_AT
}

type UserPostConnection {
  pageInfo: PageInfo!
  edges: [UserPostEdge] @semanticNonNull(levels: [0, 1])
  nodes: [Post] @semanticNonNull(levels: [0, 1])
  totalCount: Int @semanticNonNull
}

type UserPostEdge {
  cursor: String!
  node: Post @semanticNonNull
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress
  @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

interface Error {
  message: String!
}

enum ErrorCode {
  BAD_USER_INPUT
  AUTHENTICATION_ERROR
  FORBIDDEN
  INTERNAL_SERVER_ERROR
}

type InvalidInputError implements Error {
  field: String!
  message: String!
}

type InvalidInputErrors {
  errors: [InvalidInputError!]!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ResourceNotFoundError implements Error {
  message: String!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

type UserEmailAlreadyTakenError implements Error {
  message: String!
}

type UserNameAlreadyTakenError implements Error {
  message: String!
}
